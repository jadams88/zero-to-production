# This CI configuration is broken into two workflows
#
# build-and-test: Workflow jobs are triggered on PR's into the master branch
# Uses 'nx affected' to lint, test & build any app or lib that has been affected
# bt the PR
#
# release-and-deploy: Workflow jobs only run when commit to master has been added
# (a PR has been merged). This workflow with lint, test & build the affected apps
# between the last commit to master. It will then run 'semantic release' to create
# a new semver GitHub release based on the commit message. If either the
# 'demo-web-functions' app (demo site hosted on Firebase) or the 'server-lambda'
# app (API server hosted on AWS Lambda) are affected by the release they will be built
# and automatically deployed.
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  serverless-framework: circleci/serverless-framework@1.0.1

setup: &setup
  working_directory: ~/ztp
  docker:
    - image: circleci/node:12

deps-restore: &deps-restore
  restore_cache:
    key: zero-to-production-{{ checksum "package-lock.json" }}

deps-cache: &deps-cache
  save_cache:
    key: zero-to-production-{{ checksum "package-lock.json" }}
    paths:
      - ./node_modules

release-only: &release-only
  filters:
    branches:
      only: release

ignore-master: &ignore-master
  filters:
    branches:
      ignore: master

jobs:
  checkout-and-install:
    <<: *setup
    steps:
      - checkout
      - <<: *deps-restore
      - run: npm install --no-save --silent
      - <<: *deps-cache

  # Uses 'nx affected' to lint, test & build and effected project from the PR
  build-and-test-affected:
    <<: *setup
    steps:
      - checkout
      - <<: *deps-restore
      - run:
          name: Testing Affected Packages
          command: npx nx affected --target=test --base=origin/master --head=HEAD
      - run:
          name: Linting Affected Packages
          command: npx nx affected --target=lint --base=origin/master --head=HEAD
      - run:
          name: Building Affected Applications
          command: npx nx affected --target=build --base=origin/master --head=HEAD --parallel=false --configuration=ci

  # Uses 'nx affected' to lint, test & build and effected project between the latest commit
  build-and-test-latest:
    <<: *setup
    steps:
      - checkout
      - <<: *deps-restore
      - run:
          name: Testing Affected Packages
          command: npx nx affected --target=test --base=release~1 --head=release
      - run:
          name: Linting Affected Packages
          command: npx nx affected --target=lint --base=release~1 --head=release
      - run:
          name: Building Affected Applications
          command: npx nx affected --target=build --base=release~1 --head=release --parallel=false --configuration=ci

  # Run semantic release to create a new semver release and publish to github
  release:
    <<: *setup
    steps:
      - checkout
      - <<: *deps-restore
      - run:
          name: Release
          command: npm run semantic-release || true

  # Check if the 'server-lambda' project was affected and deploy
  server-lambda-deploy:
    <<: *setup
    steps:
      - checkout
      - <<: *deps-restore
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Deploy the API to AWS lambda
          command: |-
            AFFECTED=$(npx nx affected:apps --plain --base=master~1 --head=master);
            if [[ ${AFFECTED} == *"server-lambda"* ]]
            then
              echo "Server Lambda affected. Deploying new version";
              npx ng run server-lambda:build:production,ci;
              npx nx run server-lambda:serverless-deploy:ci;
            else
              echo "Server Lambda was not affected";
            fi

  # Check if the 'demo-web-functions' project was affected and deploy
  demo-web-functions-deploy:
    <<: *setup
    steps:
      - checkout
      - <<: *deps-restore
      - run:
          name: Deploy the demo site to Firebase Functions
          command: |-
            AFFECTED=$(npx nx affected:apps --plain --base=master~1 --head=master);
            if [[ ${AFFECTED} == *"demo-web-functions"* ]]
            then
              echo "Demo Web Functions affected. Deploying new version";
              npx nx run demo-web-functions:build:production;
              npx nx run demo-web-functions:deploy-ci --args="--token=${FIREBASE_TOKEN}";
            else
              echo "Demo Web Functions was not affected";
            fi

workflows:
  version: 2
  build-and-test:
    jobs:
      - checkout-and-install:
          <<: *ignore-master
      - build-and-test-affected:
          <<: *ignore-master
          requires:
            - checkout-and-install
  release-and-deploy:
    jobs:
      - checkout-and-install:
          <<: *release-only
      - build-and-test-latest:
          <<: *release-only
          requires:
            - checkout-and-install
      - release:
          <<: *release-only
          requires:
            - build-and-test-latest
      - server-lambda-deploy:
          context: aws
          <<: *release-only
          requires:
            - release
      - demo-web-functions-deploy:
          <<: *release-only
          requires:
            - release
